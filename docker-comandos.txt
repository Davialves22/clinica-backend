docker-compose up -d

mvn clean package

mvn clean package -DskipTests

mvn clean package -DskipTests


docker-compose up --build

 Acessos:
App Spring Boot: http://localhost:8080

phpMyAdmin (para gerenciar o banco): http://localhost:8081

Login: root

Senha: root

Se voc√™ j√° gerou o .jar uma vez com -DskipTests e o seu Dockerfile s√≥ copia esse .jar, voc√™ n√£o precisa rodar mvn package de novo a cada docker-compose up.

Exemplo:
bash
Copiar
Editar
# 1. Gera o .jar (uma vez)
mvn clean package -DskipTests

# 2. Sobe tudo normalmente
docker-compose up --build

docker pull phpmyadmin/phpmyadmin
docker pull mysql

üßπ 2. Fa√ßa pr√©-download manual das imagens (baixa uma vez e usa depois):
docker pull openjdk:17-slim
docker pull mysql:8.0
docker pull phpmyadmin/phpmyadmin
Depois rode:

docker-compose up --build

Com tudo rodando, acesse:

üëâ http://localhost:8081

Servidor: mysql (j√° que est√° no mesmo docker-compose)

Usu√°rio: root

Senha: root


Coloque o Dockerfile, o docker-compose.yml e o application.properties configurados conforme acima no seu projeto.

Na pasta do projeto rode:

bash
Copiar
Editar
docker-compose up --build
Aguarde os containers subirem.

Acesse:

Adminer em http://localhost:8081 (usu√°rio root, senha root)

Sua aplica√ß√£o em http://localhost:8080

Sistema: PostgreSQL

Servidor: postgres

Usu√°rio: postgres

Senha: conforme definido no docker-compose.yml

Banco: o nome que voc√™ colocou no POSTGRES_DB

Se der erro de conex√£o, me envie seu trecho do docker-compose.yml do adminer e do postgres.

-- Apaga a tabela se ela existir
DROP TABLE IF EXISTS usuarios;

-- Cria a tabela "usuarios" no PostgreSQL
CREATE TABLE usuarios (
  id BIGSERIAL PRIMARY KEY,
  ativo BOOLEAN NOT NULL,
  email VARCHAR(255) NOT NULL,
  senha VARCHAR(255) NOT NULL,
  codigo_verificador VARCHAR(6),
  CONSTRAINT uk_usuario_email UNIQUE (email)
);

-- Cria √≠ndice separado para consulta por email (al√©m da constraint de unicidade)
CREATE INDEX idx_usuario_email ON usuarios (email);


Configura√ß√£o no DBeaver:
No DBeaver, crie uma nova conex√£o:

Host: localhost

Port: 5432

Database: spring_security

Username: root

Password: root

Dica extra:
Certifique-se de que seu PostgreSQL local:

Est√° rodando

Est√° ouvindo na porta 5432

Permite conex√µes do seu usu√°rio root com a senha definida

Tem o banco spring_security criado (ou voc√™ pode cri√°-lo manualmente)

Verifique que o PostgreSQL local est√° rodando.

Rode a aplica√ß√£o com:
docker compose up --build
Acesse:

API: http://localhost:8080

Banco: via DBeaver em localhost:5432, usu√°rio postgres, senha root

 Verifique no PostgreSQL local
Para garantir que o banco existe, voc√™ pode fazer uma das seguintes op√ß√µes:

‚úÖ No DBeaver:
Conecte-se ao servidor PostgreSQL (localhost:5432, usu√°rio postgres, senha root)

Veja se o banco spring_security aparece na lista

Se n√£o aparecer, voc√™ pode cri√°-lo manualmente clicando com o bot√£o direito em "Databases" ‚Üí Create ‚Üí Database

